version: "3.7"

services:
  db:
    image: "postgres:15-alpine"
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${API_DATABASE}", "-U", "${API_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    container_name: postgres
    environment:
      - POSTGRES_USER=${API_USER}
      - POSTGRES_PASSWORD=${API_PASS}
      - POSTGRES_DB=${API_DATABASE}
    ports:
      - 5432:5432
    volumes:
      - ufopa_minicurso_postgres_data:/var/lib/postgresql/data
    networks:
      - ufopa
  api:
    depends_on:
      db:
        condition: service_healthy
    image: "minicurso/spring:latest"
    build:
      context: .
      dockerfile: ./Dockerfile.dev
    container_name: spring
    environment:
      - DB_USER=${API_USER}
      - DB_PASS=${API_PASS}
      - DB_NAME=${API_DATABASE}
      - DB_SCHEMA=${API_SCHEMA}
      - DB_URL=jdbc:postgresql://db:5432/${API_DATABASE}
      - JAVA_OPTS=-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
    ports:
      - 9000:9000
      - 5005:5005
    volumes:
      - ../:/root/api
      - ${API_LOCAL}/.m2:/root/.m2
    networks:
      - ufopa
    profiles: ["api"]

networks:
  ufopa:
    driver: bridge

volumes:
  ufopa_minicurso_postgres_data:
